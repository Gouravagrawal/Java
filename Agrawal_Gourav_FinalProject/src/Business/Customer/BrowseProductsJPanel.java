/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Business.Customer;

import Business.EcoSystem;
import Business.Enterprise.AmazonEnterprise;
import Business.Enterprise.Enterprise;
import Business.Enterprise.RetailerEnterprise;
import Business.Invoice.Invoice;
import Business.Network.Network;
import Business.Order.Order;
import Business.Order.OrderItem;
import Business.Organization.AmazonFinanceOrganization;
import Business.Organization.InventoryOrganization;
import Business.Organization.Organization;
import Business.Product.Product;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.sql.Timestamp;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author gourav
 */
public class BrowseProductsJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem ecosys;
    private AmazonEnterprise AmEnt;
    private UserAccount ua;
    private RetailerEnterprise rent;
    private Network network;
    private Invoice invoice;
    Order order = new Order();

    /**
     * Creates new form BrowseProductsJPanel
     */
    public BrowseProductsJPanel(JPanel userProcessContainer, UserAccount userAcc, EcoSystem system, AmazonEnterprise aee, Network network, RetailerEnterprise rent) {
        initComponents();
        this.userProcessContainer = userProcessContainer;

        ecosys = system;
        this.ua = userAcc;
        this.AmEnt = aee;
        this.rent = rent;
        this.network = network;
    }

    private void populateAddToCartTable() {


        DefaultTableModel model = (DefaultTableModel) orderItemJTable.getModel();
        model.setRowCount(0);

        for (OrderItem oi : order.getOrderItemList()) {
            Object row[] = new Object[3];

            row[0] = oi;
            row[1] = oi.getQuantity();
            row[2] = oi.getProduct().getTargetP();


            model.addRow(row);

        }

    }

    private void populateProductsTabel() {

        DefaultTableModel tableModel = (DefaultTableModel) productTable1.getModel();
        tableModel.setRowCount(0);

        for (Network country : ecosys.getNetworkList()) {
            //if (net.getNetworkname().equalsIgnoreCase("USA")) {
            for (Network state : country.getSubnetworklist()) {
                for (Network city : state.getSubnetworklist()) {

                    for (Enterprise ee : city.getEnterpriseDirectory().getEnterpriseList()) {

                        if (ee instanceof RetailerEnterprise) {
                            RetailerEnterprise re = (RetailerEnterprise) ee;
                            InventoryOrganization orgz = null;

                            for (Organization org : re.getOrganizationDirectory().getOrganizationList()) {


                                if (org instanceof InventoryOrganization) {
                                    orgz = (InventoryOrganization) org;

                                    for (Product p : orgz.getProductdirectory().getProductList()) {

                                        Object row[] = new Object[3];
                                        row[0] = p;
                                        row[1] = p.getTargetP();
                                        row[2] = p.getQuantity();
                                        // row[3] = p.

                                        tableModel.addRow(row);
                                    }

                                }

                            }
                        }
                    }
                }
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        productTable1 = new javax.swing.JTable();
        quantityJSpinner = new javax.swing.JSpinner();
        addCartJButton = new javax.swing.JButton();
        checkoutJButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderItemJTable = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        billingAmountJTextField = new javax.swing.JTextField();
        payMyBillJButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        refreshJButton = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Supplier Product Catalog");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 54, 240, -1));

        productTable1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        productTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Selling Price", "Availability"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(productTable1);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 94, 494, 155));

        quantityJSpinner.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                quantityJSpinnerPropertyChange(evt);
            }
        });
        add(quantityJSpinner, new org.netbeans.lib.awtextra.AbsoluteConstraints(184, 283, 85, -1));

        addCartJButton.setText("Add to cart");
        addCartJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCartJButtonActionPerformed(evt);
            }
        });
        add(addCartJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(287, 282, -1, -1));

        checkoutJButton.setText("Check out");
        checkoutJButton.setEnabled(false);
        checkoutJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkoutJButtonActionPerformed(evt);
            }
        });
        add(checkoutJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(352, 443, -1, -1));

        orderItemJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Product", "Quantity", "Selling Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(orderItemJTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 323, 494, 92));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Select Product Quantity");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 285, -1, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("Total Billing Amount(Selling price+localTax+shipping)");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 447, -1, -1));

        billingAmountJTextField.setEnabled(false);
        add(billingAmountJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(121, 477, 71, -1));

        payMyBillJButton.setText("Pay my bill");
        payMyBillJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payMyBillJButtonActionPerformed(evt);
            }
        });
        add(payMyBillJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(451, 443, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel2.setText("BROWSE PRODUCTS");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 10, -1, -1));

        refreshJButton.setText("refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });
        add(refreshJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(351, 57, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void addCartJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCartJButtonActionPerformed
        // TODO add your handling code here:

        int quantity = (int) quantityJSpinner.getValue();
        int selectedRow = productTable1.getSelectedRow();
        //Product product = (Product) productTable1.getValueAt(selectedRow, 0);

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        } else if (quantity <= 0) {
            JOptionPane.showMessageDialog(null, "Please select valid quantity to place an order");
            return;
//        } else if (quantity > product.getQuantity()) {
//            JOptionPane.showMessageDialog(null, "The quantity exceeds the available quantity");
//            return;


        } else {
            Product product = (Product) productTable1.getValueAt(selectedRow, 0);

            OrderItem oi = order.addOrderItem();
            oi.setProduct(product);
            oi.setQuantity(quantity);

            oi.setStatus("Unpaid");
            //oi.setBalancedue(oi.getQuantity() * oi.getSellingP());
            // double gg=oi.getQuantity() * oi.getProduct().getTargetP();

            oi.setBalancedue(order.getTotal());


            populateAddToCartTable();

            billingAmountJTextField.setText(String.valueOf(order.getTotal()));
        

        int q = product.getQuantity();
        int qq = q - quantity;
        product.setQuantity(qq);
        }
        //populateProductsTabel();
        refreshJButtonActionPerformed(null);
        checkoutJButton.setEnabled(true);
        
    }//GEN-LAST:event_addCartJButtonActionPerformed

    private void checkoutJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkoutJButtonActionPerformed
        // TODO add your handling code here:


        Customer c = ua.getCustomer();
        order.setCustomer(c);
        invoice = new Invoice();
        invoice.setOrder(order);

        java.util.Date date = new java.util.Date();
        Timestamp ts = new Timestamp(date.getTime());

        order.setTimestamp(ts);                           
        JOptionPane.showMessageDialog(null, "Thanks Visit again");
       // order = new Order();
        
        for(Organization organization:AmEnt.getOrganizationDirectory().getOrganizationList()){
            
            AmazonFinanceOrganization afo=null;
            if(organization instanceof AmazonFinanceOrganization){
                afo=(AmazonFinanceOrganization)organization;
                afo.getInvoiceDirectory().addInvoice(invoice);
                invoice.setInvoicestatus("unpaid");
            }
            
        }





    }//GEN-LAST:event_checkoutJButtonActionPerformed

    private void payMyBillJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payMyBillJButtonActionPerformed
        // TODO add your handling code here:
        if (billingAmountJTextField.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "No products purchased");
            return;
        } else {
            MyInvoiceJPanel mijp = new MyInvoiceJPanel(userProcessContainer, ua, AmEnt, ecosys, invoice, order);
            userProcessContainer.add("MyInvoiceJPanel", mijp);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        }

    }//GEN-LAST:event_payMyBillJButtonActionPerformed

    private void quantityJSpinnerPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_quantityJSpinnerPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_quantityJSpinnerPropertyChange

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) productTable1.getModel();
        model.setRowCount(0);

        RetailerEnterprise se = null;
        for (Network country : ecosys.getNetworkList()) {
            for (Network state : country.getSubnetworklist()) {
                for (Network city : state.getSubnetworklist()) {
                    if (network.equals(city)) {

                        for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {

                            if (enterprise instanceof RetailerEnterprise) {
                                se = (RetailerEnterprise) enterprise;



                                for (Organization o : se.getOrganizationDirectory().getOrganizationList()) {
                                    InventoryOrganization so = null;
                                    if (o instanceof InventoryOrganization) {

                                        so = (InventoryOrganization) o;




                                        for (Product p2 : so.getProductdirectory().getProductList()) {

                                            Object row[] = new Object[3];
                                            row[0] = p2;
                                            row[1] = p2.getTargetP();
                                            row[2] = p2.getQuantity();
                                            

                                            model.addRow(row);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

    }//GEN-LAST:event_refreshJButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCartJButton;
    private javax.swing.JTextField billingAmountJTextField;
    private javax.swing.JButton checkoutJButton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable orderItemJTable;
    private javax.swing.JButton payMyBillJButton;
    private javax.swing.JTable productTable1;
    private javax.swing.JSpinner quantityJSpinner;
    private javax.swing.JButton refreshJButton;
    // End of variables declaration//GEN-END:variables
}
